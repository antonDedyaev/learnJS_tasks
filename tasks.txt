Задача 3

Сформировать все необходимые классы и методы, которые позволят сделать калькулятор корзины, работающей со скидками.
Есть товар:
- id
- название
- цена
- размер скидки, по умолчанию


Пример:
Мяч
1
1000 рублей
10% скидка по умолчанию
или
футболка
2
2000 рублей
25%
К товару могут быть прикреплены сезонные скидки.
- id
- название
- дата начала действия (без года)
- дата завершения действия (без года)
- размер скидки

Пример:
1
весенняя распродажа
1 апреля -1 июля
20%
или
2
новогодние скидки
10 декабря - 20 мая
30%
К одному и тому же товару могут быть прикреплены несколько скидок.
Если обе скидки прикреплены к мячу, то мяч будет стоить
1000 - 10% = 900
900 - 20% = 720
720 - 30% = 504
последовательность применения скидок не важна.
И есть еще другой тип скидок. Зависящий от общего размера корзины.
- id
- минимальная сумма заказа
- размер скидки
например, 
1
1000 рублей 
5%
или
2
5000 рублей 6%
Из этого набора применяется максимум одна (наибольшая из доступных)
Если общий заказ сделан на сумму 700 рублей (после скидок относящихся к отдельным товарам), то в примере не будет ни одной скидки из последнего раздела
Если на 2700, то применится скидка 5% из последнего раздела
Если 8000, то 6% из последнего раздела.
Итак, вы получается подготовили кассы, которые отвечают за товары и скидки. И нужен пример, того как его протестировать.

Для этого разумно иметь тестовый набор данных в json
items: [
  {id: 1,
  name: 'мяч'
  price: 1000
  discount: '10%'
  },
  {id: 2,
  name: 'футболка'
  price: 2000
  discount: '25%'
  }
],
discounts:[
  {
    id: 1,
    name: 'весенняя распродажа',
    discount: 20%,
  },
  {
    id: 2,
    name: 'новогодние скидки',
    discount: 20%,
  }
],
totalDiscounts: [
  {
   id: 1,
   minPrice: 1000,
   discount: '5%'
  },
  {
   id: 1,
   minPrice: 5000,
   discount: '6%'
  },
]
purchases: [ // сколько каких товаров покупает клиент
  {
    item: 1,
    amount: 10
  },
  {
    item: 2,
    amount: 5
  }  
],
itemsDiscounts: [ // на какие товары какие скидки должны действовать
  {
    itemId: 1,
    discountId: 1
  },
  {
    itemId: 2,
    discountId: 1
  },
  {
    itemId: 2,
    discountId: 2
  }
]
Более аккуратно наполните самостоятельно, но суть тестовых данных должна быть понятна.
Задача - обработать данные из json и вывести информацию по корзине в КОНСОЛЬ.
Должно получиться примерно следующее:
Мяч - 10 штук, 5 040 рублей (10 000 рублей без скидки);
Футболка - 5 штук,  5 250 рублей (10 000 рублей без скидки)
Итого: 10 290 (20 000 рублей без скидки)
Итого со скидкой: 9 672 рубля 60 копеек

class Item {
  constructor(id, name, price, defaultDiscount) {
    this.id = id;
    this.name = name;
    this.price = price;
    this.defaultDiscount = defaultDiscount;
  }
}

class SeasonDiscount {
  constructor(id, name, discountStart, discountEnd, discountSize) {
    this.id = id;
    this.name = name;
    this.discountStart = discountStart;
    this.discountEnd = discountEnd;
    this.discountSize = discountSize;
  }
  
  getDiscountPeriod(start, end) {
    return `${this.discountStart} - ${this.discountEnd}`;
  }
}

class CartTotalDiscount {
  constructor(id, minOrderSum, discountSize) {
    this.id = id;
    this.minOrderSum = minOrderSum;
    this.discountSize = discountSize;
  }
}

class Cart {
  constructor(cartItems = [], totalDiscount = []) {
    this.cartItems = cartItems;
    this.totalDiscount = totalDiscount;
  }
  
  totalSum() {
    return this.cartItems.reduce((acc, item) => {
      return acc + item.cartItem.price * item.amount;
    },0)
  }
  
  sumWithTotalDiscount() {
    let totalDiscountSize = 0;
    const discountValue = this.totalDiscount.reduce((acc, discount) => {
      if (this.totalSum() >= discount.minOrderSum) {
        totalDiscountSize = parseFloat(discount.discountSize) / 100;
      } 
      if (this.totalSum() < discount.minOrderSum) {
        totalDiscountSize = acc;
      }
      return totalDiscountSize;
    }, 0);
      
    return this.totalSum() - (this.totalSum() * discountValue);
  }
}

const test = {
  'items': [
    {
      'id': 1,
      'name': 'мяч',
      'price': 1000,
      'discount': '10%'
    },
    {
      'id': 2,
      'name': 'футболка',
      'price': 2000,
      'discount': '25%'
    }
  ],
  'discounts':[
    {
      'id': 1,
      'name': 'весенняя распродажа',
      'startPeriod': '1 апреля',
      'endPeriod': '1 июня',
      'discount': '20%'
    },
    {
      'id': 2,
      'name': 'новогодние скидки',
      'startPeriod': '10 декабря',
      'endPeriod': '1 мая',
      'discount': '20%',
    }
  ],
  'totalDiscounts': [
    {
     'id': 1,
     'minPrice': 1000,
     'discount': '5%'
    },
    {
     'id': 2,
     'minPrice': 5000,
     'discount': '6%'
    },
  ],
  'purchases': [
    {
      'item': 1,
      'amount': 10
    },
    {
      'item': 2,
      'amount': 5
    }  
  ],
  'itemsDiscounts': [ // на какие товары какие скидки должны действовать
    {
      'itemId': 1,
      'discountId': 1
    },
    {
      'itemId': 1,
      'discountId': 2
    },
    {
      'itemId': 2,
      'discountId': 2
    }
  ]
}

const purchasedItems = test.purchases.map((purchase) => {
  const item = test.items.find((el) => purchase.item === el.id);
  const matchedIds = []
  const discountIds = test.itemsDiscounts.forEach((el) => {
    if (el.itemId === item.id) {
      matchedIds.push(el.discountId);
    }
  })
  
  const addedDiscounts = test.discounts.filter((el) => matchedIds.includes(el.id))
  
  console.log(addedDiscounts);
  
  return { cartItem: new Item(item.id, item.name, item.price, item.defaultDiscount), amount: purchase.amount, seasonDiscounts: addedDiscounts || null };
})

console.log(purchasedItems)

const discounts = test.totalDiscounts.map((discount) => {
  return new CartTotalDiscount(discount.id, discount.minPrice, discount.discount);
})


const cart = new Cart(purchasedItems, discounts)
console.log(cart.totalSum());
console.log(cart.sumWithTotalDiscount());

